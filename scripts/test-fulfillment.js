const mongoose = require('mongoose');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ Connected to MongoDB'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// Import models
const Product = require('../models/Product');
const User = require('../models/User');

async function testFulfillmentSystem() {
  try {
    console.log('üîç Testing fulfillment system...');
    
    // 1. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖÿπÿ™ŸÖÿØÿ©
    console.log('\nüì¶ Testing approved products...');
    const approvedProducts = await Product.find({ 
      isApproved: true, 
      isRejected: false 
    }).populate('supplierId', 'name');
    
    console.log(`‚úÖ Found ${approvedProducts.length} approved products:`);
    approvedProducts.forEach(product => {
      console.log(`  - ${product.name} (${product.supplierId?.name}) - Stock: ${product.stockQuantity}`);
    });
    
    // 2. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÖÿ±ŸÅŸàÿ∂ÿ©
    console.log('\n‚ùå Testing rejected products...');
    const rejectedProducts = await Product.find({ 
      isRejected: true 
    }).populate('supplierId', 'name');
    
    console.log(`‚ùå Found ${rejectedProducts.length} rejected products:`);
    rejectedProducts.forEach(product => {
      console.log(`  - ${product.name} (${product.supplierId?.name}) - Reason: ${product.rejectionReason}`);
    });
    
    // 3. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÇŸäÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©
    console.log('\n‚è≥ Testing pending products...');
    const pendingProducts = await Product.find({ 
      isApproved: false, 
      isRejected: false 
    }).populate('supplierId', 'name');
    
    console.log(`‚è≥ Found ${pendingProducts.length} pending products:`);
    pendingProducts.forEach(product => {
      console.log(`  - ${product.name} (${product.supplierId?.name})`);
    });
    
    // 4. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖŸàÿ±ÿØŸäŸÜ
    console.log('\nüë• Testing suppliers...');
    const suppliers = await User.find({ role: 'supplier' });
    console.log(`üë• Found ${suppliers.length} suppliers:`);
    suppliers.forEach(supplier => {
      console.log(`  - ${supplier.name} (${supplier.email})`);
    });
    
    // 5. ÿßÿÆÿ™ÿ®ÿßÿ± ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ
    console.log('\nüè™ Testing storage eligibility...');
    const eligibleForStorage = approvedProducts.filter(product => product.stockQuantity > 0);
    console.log(`üè™ ${eligibleForStorage.length} products eligible for storage:`);
    eligibleForStorage.forEach(product => {
      console.log(`  - ${product.name}: ${product.stockQuantity} pieces available`);
    });
    
    // 6. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ§ŸáŸÑÿ© ŸÑŸÑÿ™ÿÆÿ≤ŸäŸÜ
    console.log('\n‚ö†Ô∏è Products not eligible for storage:');
    const notEligible = approvedProducts.filter(product => product.stockQuantity <= 0);
    console.log(`‚ö†Ô∏è ${notEligible.length} approved products with no stock:`);
    notEligible.forEach(product => {
      console.log(`  - ${product.name}: ${product.stockQuantity} pieces`);
    });
    
    // 7. ŸÖŸÑÿÆÿµ ÿßŸÑŸÜÿ∏ÿßŸÖ
    console.log('\nüìä System Summary:');
    console.log(`  ‚úÖ Approved products: ${approvedProducts.length}`);
    console.log(`  ‚ùå Rejected products: ${rejectedProducts.length}`);
    console.log(`  ‚è≥ Pending products: ${pendingProducts.length}`);
    console.log(`  üè™ Eligible for storage: ${eligibleForStorage.length}`);
    console.log(`  ‚ö†Ô∏è Approved but no stock: ${notEligible.length}`);
    console.log(`  üë• Total suppliers: ${suppliers.length}`);
    
    // 8. ÿ™ŸàÿµŸäÿßÿ™
    console.log('\nüí° Recommendations:');
    if (rejectedProducts.length > 0) {
      console.log('  - Some products are rejected and cannot be stored');
    }
    if (pendingProducts.length > 0) {
      console.log('  - Some products are pending approval');
    }
    if (notEligible.length > 0) {
      console.log('  - Some approved products have no stock for storage');
    }
    if (eligibleForStorage.length === 0) {
      console.log('  - No products are currently eligible for storage');
    } else {
      console.log(`  - ${eligibleForStorage.length} products can be stored`);
    }
    
  } catch (error) {
    console.error('‚ùå Error testing fulfillment system:', error);
  } finally {
    mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
}

testFulfillmentSystem(); 